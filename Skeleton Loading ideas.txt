======= SKELETON.VUE=======
<template>
  <div class="container">
    <div class="row" v-if="recipesData">
      <h3 class="text-center fw-bold mt-3">Daftar Resep Masakan</h3>
      <Recipe
        v-for="recipe in recipesData.data"
        :key="recipe.id"
        :recipesData="recipe"
        @toggle-favorite="toggleFavorite"
      />
    </div>
  </div>
</template>

<script>
// @ is an alias to /src
// import Recipe from "@/components/Recipe.vue";
import axios from "axios";
import { useStore } from "vuex";
import Recipe from "@/components/Recipe.vue";

export default {
  name: "Skeleton",
  async setup() {
    const store = useStore();
    const res = await axios.get("http://my-recipes-api.test/api/recipes", {
      headers: {
        Authorization: `Bearer ${store.state.token}`,
      },
    });
    const recipesData = await res.data;
    return {
      recipesData,
    };
  },
  components: {
    Recipe,
  },
  //   data() {
  //     return {
  //       recipesData: {},
  //       search: {
  //         category: "",
  //         name: "",
  //         level: "",
  //       },
  //       message: "",
  //     };
  //   },
  //   mounted() {
  //     this.getRecipes();
  //   },
  methods: {
    async toggleFavorite(recipeId) {
      if (this.$store.state.token != null) {
        await axios
          .get("http://my-recipes-api.test/api/toggle-favorite/" + recipeId, {
            headers: {
              Authorization: `Bearer ${this.$store.state.token}`,
            },
          })
          .then((response) => {
            this.message = response.data.message;
            this.getRecipes();
          })
          .catch((error) => {
            if (error.response) {
              this.message = error.data.message;
            }
          });
      }
    },
    async getRecipes() {
      if (this.$store.state.token != null) {
        await axios
          .post(
            "http://my-recipes-api.test/api/search",
            {},
            {
              headers: {
                Authorization: `Bearer ${this.$store.state.token}`,
              },
            }
          )
          .then((response) => {
            this.recipesData = response.data;
          })
          .catch((error) => {
            if (
              error.response.status === 401 ||
              error.response.status === 404
            ) {
              this.$store.dispatch("clearToken");
              this.$router.push("/login");
            }
          });
      } else {
        this.$router.push("/login");
      }
    },
  },
};
</script>

<style scoped>
.btn.btn-primary.custom-button {
  background-color: lightseagreen;
  border-color: lightseagreen;
}
.btn.btn-primary.filter-button {
  background-color: rgb(231, 229, 229);
  border-color: rgb(231, 229, 229);
  color: black;
}
</style>


====index.js Router===
import { createRouter, createWebHistory } from "vue-router";
import Login from "../views/Auth/Login.vue";
import Register from "../views/Auth/Register.vue";
import NotFound from "../views/Error/NotFound.vue";
// import store from "../store/index";

import AllRecipes from "../views/Recipes/AllRecipes.vue";
import MyRecipes from "../views/Recipes/MyRecipes.vue";
import MyFavorites from "../views/Recipes/MyFavorites.vue";
import RecipeDetails from "../views/Recipes/RecipeDetails.vue";
import AddNewRecipe from "../views/Recipes/AddNewRecipe.vue";
import EditRecipe from "../views/Recipes/EditRecipe.vue";
import Skeleton from "../views/Recipes/Skeleton.vue";

const routes = [
  {
    path: "/",
    name: "home",
    component: AllRecipes,
  },
  {
    path: "/recipes",
    name: "recipes",
    component: AllRecipes,
  },
  {
    path: "/skeleton",
    name: "skeleton",
    component: Skeleton,
  },
  {
    path: "/recipes/:recipename",
    name: "recipe",
    component: RecipeDetails,
    props: true,
  },
  {
    path: "/recipes/:recipename/edit",
    name: "editrecipe",
    component: EditRecipe,
    props: true,
  },
  {
    path: "/my-recipes",
    name: "myrecipes",
    component: MyRecipes,
  },
  {
    path: "/my-favorites",
    name: "myfavorites",
    component: MyFavorites,
  },
  {
    path: "/add-recipe",
    name: "addrecipe",
    component: AddNewRecipe,
  },
  {
    path: "/login",
    name: "login",
    component: Login,
    // before enter, check if token is found
    beforeEnter: (to, from, next) => {
      if (localStorage.getItem("auth")) {
        next(from.path);
      } else {
        next();
      }
    },
  },
  {
    path: "/register",
    name: "register",
    component: Register,
    // before enter, check if token is found
    beforeEnter: (to, from, next) => {
      if (localStorage.getItem("auth")) {
        next(from.path);
      } else {
        next();
      }
    },
  },
  //   make router for not found page
  { path: "/:pathMatch(.*)*", name: "NotFound", component: NotFound },
];

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes,
});

export default router;


====App.Vue====

<template>
  <Navbar
    v-if="
      [
        'recipes',
        'recipe',
        'myrecipes',
        'myfavorites',
        'home',
        'addrecipe',
        'editrecipe',
      ].includes($route.name)
    "
  ></Navbar>
  <RouterView v-slot="{ Component }">
    <template v-if="Component">
      <Transition mode="out-in">
        <KeepAlive>
          <Suspense>
            <!-- main content -->
            <component :is="Component"></component>

            <!-- loading state -->
            <template #fallback> Loading... </template>
          </Suspense>
        </KeepAlive>
      </Transition>
    </template>
  </RouterView>
</template>

<script>
import Navbar from "@/components/Navbar.vue";
import Skeleton from "@/views/Recipes/Skeleton.vue";

export default {
  components: {
    Navbar,
    Skeleton,
  },
};
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #2c3e50;
}

#nav {
  padding: 30px;
}

#nav a {
  font-weight: bold;
  color: #2c3e50;
}

#nav a.router-link-exact-active {
  color: lightseagreen;
}
#nav a {
  color: white;
}
</style>






